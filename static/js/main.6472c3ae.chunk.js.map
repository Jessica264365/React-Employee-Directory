{"version":3,"sources":["utils/RandomUserAPI.js","components/EmployeeList.js","components/SearchBar.js","components/Jumbotron.js","components/EmployeeContain.js","App.js","reportWebVitals.js","index.js"],"names":["retrieveUsers","axios","get","EmployeeList","props","icon","faSortAlphaDownAlt","employees","console","log","getLastName","employee","name","last","sort","employeeArray","a","b","firstEmployee","nextEmployee","isSorted","isNotSorted","className","onClick","handleSort","length","map","first","src","picture","thumbnail","alt","email","phone","location","city","Col","lg","SearchBar","Form","Group","Control","value","search","type","placeholder","onChange","e","handleStateChange","styles","jumbotron","background","height","marginBottom","color","TheJumbotron","Jumbotron","style","Container","EmployeeMain","setState","target","state","getUsersApi","then","res","data","results","catch","err","this","employeeSort","filterByName","filter","toLowerCase","includes","Row","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6472c3ae.chunk.js","sourcesContent":["import axios from \"axios\";\r\n// Retrieve an array of random users\r\nconst URL = \"https://randomuser.me/api/?results=100&nat=us,dk,fr,gb\";\r\nfunction retrieveUsers() {\r\n  return axios.get(URL);\r\n}\r\nexport default retrieveUsers;\r\n","import Table from \"react-bootstrap/Container\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSortAlphaDownAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport default function EmployeeList(props) {\r\n  // Font Awesome icon for sorting\r\n  const icon = <FontAwesomeIcon icon={faSortAlphaDownAlt} />;\r\n  // Saving employee props to a variable so it's easier to use\r\n  const employees = props.employees;\r\n  console.log(employees);\r\n  // Get the last name of an employee to be used in the compare sort\r\n  const getLastName = (employee) => {\r\n    return employee.name.last;\r\n  };\r\n  // Use the sort method to preform a compare sort on the array of employees\r\n  // Ascending\r\n  const isSorted = (getLastName, employeeArray) => {\r\n    employeeArray.sort((a, b) => {\r\n      const firstEmployee = getLastName(a);\r\n      const nextEmployee = getLastName(b);\r\n      if (firstEmployee < nextEmployee) {\r\n        return -1;\r\n      } else if (firstEmployee > nextEmployee) {\r\n        return 1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    });\r\n  };\r\n  // Descending\r\n  const isNotSorted = (getLastName, employeeArray) => {\r\n    employeeArray.sort((a, b) => {\r\n      const firstEmployee = getLastName(a);\r\n      const nextEmployee = getLastName(b);\r\n      if (nextEmployee < firstEmployee) {\r\n        return -1;\r\n      } else if (nextEmployee > firstEmployee) {\r\n        return 1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    });\r\n  };\r\n  if (props.sort === true) {\r\n    isSorted(getLastName, employees);\r\n  } else {\r\n    isNotSorted(getLastName, employees);\r\n  }\r\n\r\n  return (\r\n    <Table className=\"table-striped table-responsive table align-middle ms-4\">\r\n      <thead>\r\n        <tr className=\"table align-middle\">\r\n          <th>\r\n            Name\r\n            <button onClick={props.handleSort} className=\"btn\">\r\n              {icon}\r\n            </button>\r\n          </th>\r\n          <th>Image</th>\r\n          <th>Email</th>\r\n          <th>Phone</th>\r\n          <th>Location</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {/* If there are employees in the array map through them and create a table cell for each one */}\r\n        {employees.length > 0 ? (\r\n          employees.map((employee) => {\r\n            return (\r\n              <tr>\r\n                <td>{`${employee.name.first} ${employee.name.last}`}</td>\r\n                <td>\r\n                  <img\r\n                    className=\"center\"\r\n                    src={employee.picture.thumbnail}\r\n                    alt={employee.name.first}\r\n                  />\r\n                </td>\r\n                <td>{employee.email}</td>\r\n                <td>{employee.phone}</td>\r\n\r\n                <td>{employee.location.city}</td>\r\n              </tr>\r\n            );\r\n          })\r\n        ) : (\r\n          <Col lg={12}>\r\n            <tr>\r\n              <td> </td>\r\n\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n              <td></td>\r\n            </tr>\r\n          </Col>\r\n        )}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nexport default function SearchBar(props) {\r\n  return (\r\n    // Pass the handleStateChange handler as a prop to be used in the search bar\r\n    <Form.Group className=\"mt-3\">\r\n      <Form.Control\r\n        value={props.search}\r\n        className=\"mx-auto\"\r\n        type=\"search\"\r\n        placeholder=\"Search\"\r\n        onChange={(e) => {\r\n          props.handleStateChange(e);\r\n        }}\r\n      />\r\n    </Form.Group>\r\n  );\r\n}\r\n","import Jumbotron from \"react-bootstrap/Jumbotron\";\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nconst styles = {\r\n  jumbotron: {\r\n    background: \"#3c6e71\",\r\n    height: \"250px\",\r\n    marginBottom: \"30px\",\r\n    color: \"white\",\r\n  },\r\n};\r\n\r\nexport default function TheJumbotron() {\r\n  return (\r\n    <Jumbotron\r\n      className=\"justify-content-center text-center\"\r\n      style={styles.jumbotron}\r\n    >\r\n      <Container>\r\n        <h1>Employee Directory</h1>\r\n        <p>Use the search bar to find an employee</p>\r\n      </Container>\r\n    </Jumbotron>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport retrieveUsers from \"../utils/RandomUserAPI\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport EmployeeList from \"./EmployeeList\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport TheJumbotron from \"./Jumbotron\";\r\n\r\nclass EmployeeMain extends Component {\r\n  //constructor function for component\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      search: \"\",\r\n      employees: [],\r\n      sort: true,\r\n    };\r\n  }\r\n  // Handle the change in the search bar when a user types in it\r\n  handleStateChange = (e) => {\r\n    this.setState({ search: e.target.value });\r\n  };\r\n  // Handle the state change of the sort\r\n  handleSort = () => {\r\n    this.state.sort === true\r\n      ? this.setState({ sort: false })\r\n      : this.setState({ sort: true });\r\n  };\r\n  // When the component mounts preform the Random User API call\r\n  componentDidMount() {\r\n    this.getUsersApi();\r\n  }\r\n  // Random User API call\r\n  getUsersApi = () => {\r\n    retrieveUsers()\r\n      .then((res) => this.setState({ employees: res.data.results }))\r\n      .catch((err) => console.log(err));\r\n  };\r\n  // filter through the array of employees and return names that contain the letters typed into the search box\r\n  render() {\r\n    let filterByName = this.state.employees.filter((employee) => {\r\n      let name = `${employee.name.first} ${employee.name.last}`;\r\n      return name.toLowerCase().includes(this.state.search.toLowerCase())\r\n        ? true\r\n        : false;\r\n    });\r\n\r\n    let employeeSort;\r\n    // If the search bar is empty just display the employees as they are\r\n    if (this.state.search === \"\") {\r\n      employeeSort = this.state.employees;\r\n    } else {\r\n      // otherwise filter through the employees by name\r\n      employeeSort = filterByName;\r\n    }\r\n    console.log(employeeSort);\r\n    return (\r\n      <>\r\n        <TheJumbotron />\r\n        <Container className=\"container-fluid\">\r\n          <Row>\r\n            <Col lg={4}></Col>\r\n            <Col lg={4}>\r\n              <SearchBar\r\n                search={this.state.search}\r\n                handleStateChange={this.handleStateChange}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col lg={1}></Col>\r\n            <Col lg={10}>\r\n              <EmployeeList\r\n                employees={employeeSort}\r\n                sort={this.state.sort}\r\n                handleSort={this.handleSort}\r\n              />\r\n            </Col>\r\n            <Col lg={1}></Col>\r\n          </Row>\r\n        </Container>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EmployeeMain;\r\n","import EmployeeMain from \"./components/EmployeeContain\";\nimport React from \"react\";\n\nfunction App() {\n  return <EmployeeMain />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}